@page "/customers"
@using Whosales.Domain;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using BlazorApp.Shared

<h3>customersData</h3>
@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <NavLink class="nav-link" href="customers/create/" Match="NavLinkMatch.All">
        <span class="oi oi-plus" aria-hidden="true"></span> Create
    </NavLink>
    <div class="row">
        <div class="col">
            <label>Название продукта</label>
            <input class="input-group" type="text" @bind-value="nameTemp" @bind-value:event="oninput">
        </div>
        <div class="col">
            <div class="row">
                @for (int i = currentPage - 5; i < currentPage - 1; i++)
                {
                    @if (i <= 0)
                        continue;
                    var buttonNumber = i;
                    <button class="col btn btn-secondary" @onclick="@(e => currentPage = buttonNumber)">@buttonNumber</button>
                }
                @for (int i = currentPage; i < currentPage + 5; i++)
                {
                    @if (i >= customers.Where(x => x.Name.Contains(nameTemp)).Count() / pageSize + 1)
                        break;
                    var buttonNumber = i;
                    <button class="col btn btn-secondary" @onclick="@(e => currentPage = buttonNumber)">@buttonNumber</button>
                }
            </div>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>TelephoneNumber</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers
           .Where(x => x.Name.Contains(nameTemp))
           .Skip(pageSize * (currentPage - 1))
           .Take(pageSize))
            {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Address</td>
                    <td>@customer.TelephoneNumber</td>
                    <td>
                        <NavLink class="nav-link" href=@{$"customers/edit/{customer.CustomerId}"}  Match="NavLinkMatch.All">
                            <span class="oi oi-pencil" aria-hidden="true"></span> Edit
                        </NavLink>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => Delete(customer.CustomerId))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private Customer[]? customers;

    private string nameTemp = "";
    private int pageSize = 20;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            customers = await Http.GetFromJsonAsync<Customer[]>("api/customers/");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    private async Task Delete(int id)
    {
        await Http.DeleteAsync($"api/customers/{id}");
        string message = "Customer was successfully deleted";
        NavigationManager.NavigateTo($"/customers/successpage/{message}");
    }
}
