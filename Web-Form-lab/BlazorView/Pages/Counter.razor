@page "/counter"
@using Whosales.Domain;
@inject HttpClient client



<h2>Список отчетов о продаже</h2>
<form name="userForm">
    <input type="hidden" name="id" value="0" />
    <div class="form-group col-md-5">
        <label for="cost">Цена:</label>
        <input value="@currentReport.Cost" class="form-control" name="cost" />
    </div>
    <div class="form-group col-md-5">
        <label for="volume">Количество:</label>
        <input value="@currentReport.Volume" class="form-control" name="volume" type="number" />
    </div>
    <div class="form-group col-md-5">
        <label for="customerDD">Заказчик:</label>
        <select value="@currentReport.CustomerId" name="customerDD" id="customerDD"></select>
    </div>
    <div class="form-group col-md-5">
        <label for="productDD">Товар:</label>
        <select value="@currentReport.ProductId" name="productDD" id="productDD"></select>
    </div>
    <div class="panel-body">
        <button type="submit" id="submit" class="btn btn-primary">Сохранить</button>
        <a id="reset" class="btn btn-primary">Сбросить</a>
    </div>
</form>
<table class="table table-condensed table-striped  col-md-6">
    <thead><tr><th>Id</th><th>Стоимость</th><th>Количество</th><th>Заказчик</th><th>Товар</th><th></th></tr></thead>
    <tbody>
        @foreach (var report in releaseReports)
        {
            <tr>
                <td>@report.ReleaseReportId</td>
                <td>@report.Cost</td>
                <td>@report.Volume</td>
                <td>@report.Customer.Name</td>
                <td>@report.Product.Name</td>
            </tr>
        }
    </tbody>
</table>
<div>2019 © Metanit.com</div>

@code {
    private int currentCount = 0;
    private List<Product> products;
    private List<Customer> customers;
    private List<ReleaseReport> releaseReports;
    private ReleaseReport currentReport;
    private bool isAddStatus;
    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        products = await client.GetFromJsonAsync<List<Product>>("https://localhost:7073/api/Products");
        customers = await client.GetFromJsonAsync<List<Customer>>("https://localhost:7073/api/customers");
        releaseReports = await client.GetFromJsonAsync<List<ReleaseReport>>("https://localhost:7073/api/ReleaseReports");
        currentReport = new ReleaseReport();
    }

    // Получение одного пользователя
    async void GetReleaseReport(int id)
    {
        isAddStatus = false;
        var report = releaseReports.FirstOrDefault(x => x.ReleaseReportId == id);
        currentReport = report;
    }
    // Добавление пользователя
    async void CreateReport()
    {
        await client.PostAsJsonAsync<ReleaseReport>("https://localhost:7073/api/ReleaseReports", currentReport);
    }
    // Изменение пользователя
    async void EditReport()
    {
        await client.PutAsJsonAsync<ReleaseReport>("https://localhost:7073/api/ReleaseReports", currentReport);
    }

    // Удаление пользователя
    async void DeleteReport(int id)
    {
        await client.DeleteAsync("https://localhost:7073/api/ReleaseReports/"+id);
    }

    // сброс формы
    async void reset()
    {
        currentReport = new ReleaseReport();
    }
}
